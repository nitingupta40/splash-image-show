{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","character","urls","thumb","description","CardList","characters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","unsplash","Unsplash","accessKey","App","getPhotosFromUnsplash","tag","search","photos","orientation","then","response","json","setState","results","e","searchField","target","value","state","bind","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sWAGaA,G,kBAAO,SAACC,GAEjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,aAAaC,IAAKH,EAAMI,UAAUC,KAAKC,QAChD,2BAAIN,EAAMI,UAAUG,gBCJnBC,EAAW,SAACR,GAErB,OACI,yBAAKC,UAAU,aACTD,EAAMS,YAAcT,EAAMS,WAAWC,KAAI,SAAAN,GAAS,OAChD,kBAAC,EAAD,CAAMO,IAAKP,EAAUQ,GAAIR,UAAWA,SCNvCS,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OACI,2BACAd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,QCJZG,EAAW,I,OAAIC,GAAS,CAAEC,UAAW,gDA6C5BC,E,kDA1Cb,aAAc,IAAD,8BACX,gBASFC,sBAAwB,WAAmB,IAAlBC,EAAiB,uDAAX,OAC7BL,EAASM,OAAOC,OAAOF,EAAK,EAAG,GAAI,CAAEG,YAAa,aACjDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAACrB,WAAYoB,EAAKE,cAbnC,EAkBbhB,aAAe,SAACiB,GACd,EAAKF,SAAS,CAACG,YAAcD,EAAEE,OAAOC,QACtC,EAAKb,sBAAsBU,EAAEE,OAAOC,QAlBpC,EAAKC,MACL,CACE3B,WAAa,GACbwB,YAAa,IAEf,EAAKlB,aAAe,EAAKA,aAAasB,KAAlB,gBAPT,E,gEAgBXC,KAAKhB,0B,+BAME,IAAD,EAC4BgB,KAAKF,MAAhC3B,EADD,EACCA,WADD,EACawB,YACnB,OACE,oCACA,yBAAKhC,UAAU,OACb,0CACA,oCACF,kBAAC,EAAD,CACEa,YAAY,oBACZC,aAAcuB,KAAKvB,eAEnB,kBAAC,EAAD,CAAUN,WAAcA,W,GAlCd8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.7ab9c83e.chunk.js","sourcesContent":["import React from 'react';\nimport './card-styles.css'\n\nexport const Card = (props) => \n{\n    return (\n        <div className=\"card-container\">\n            <img alt=\"characters\" src={props.character.urls.thumb}></img>\n            <p>{props.character.description}</p>\n        </div>\n    );\n}","import React from 'react';\nimport './card-list-styles.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = (props) => \n{\n    return (\n        <div className='card-list'>\n             {props.characters && props.characters.map(character => \n                <Card key={character.id} character={character}></Card>\n            )}\n        </div>\n    );\n}","import  React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n\n    return (\n        <input \n        className=\"search\"\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}/>\n    );\n}","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component' \nimport { SearchBox } from './components/search-box/search-box.component'\nimport Unsplash from 'unsplash-js';\n\nconst unsplash = new Unsplash({ accessKey: \"M2D69tHCgCGYDPS9IsjqwnJ8sQ5TJIBppJDd9eCoPDY\" });\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state=\n    {\n      characters : [],\n      searchField: ''\n    }; \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  getPhotosFromUnsplash = (tag = 'test') => {\n    unsplash.search.photos(tag, 1, 12, { orientation: \"portrait\" })\n    .then(response => response.json())\n    .then(json => this.setState({characters: json.results})) \n  }\n  componentDidMount(){\n    this.getPhotosFromUnsplash();\n  }\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value});\n    this.getPhotosFromUnsplash(e.target.value);\n  }\n  render(){\n    const {characters, searchField} = this.state;\n    return(\n      <>\n      <div className=\"App\">\n        <h1>Image Show</h1>\n        <>\n      <SearchBox \n        placeholder='search characters'\n        handleChange={this.handleChange}>\n      </SearchBox>  \n        <CardList characters = {characters}>  \n        </CardList>\n        </>\n    </div>\n       </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}